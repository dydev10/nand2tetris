// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx/zy
    Not(in = zx , out = notZx);
    Not(in = zy , out = notZy);
    And16(
        a = x,
        b[0] = notZx,
        b[1] = notZx,
        b[2] = notZx,
        b[3] = notZx,
        b[4] = notZx,
        b[5] = notZx,
        b[6] = notZx,
        b[7] = notZx,
        b[8] = notZx,
        b[9] = notZx,
        b[10] = notZx,
        b[11] = notZx,
        b[12] = notZx,
        b[13] = notZx,
        b[14] = notZx,
        b[15] = notZx,
        out = zeroX
    );
    And16(
        a = y,
        b[0] = notZy,
        b[1] = notZy,
        b[2] = notZy,
        b[3] = notZy,
        b[4] = notZy,
        b[5] = notZy,
        b[6] = notZy,
        b[7] = notZy,
        b[8] = notZy,
        b[9] = notZy,
        b[10] = notZy,
        b[11] = notZy,
        b[12] = notZy,
        b[13] = notZy,
        b[14] = notZy,
        b[15] = notZy,
        out = zeroY
    );

    // X, Y preprocessed values that will be used in operations
    Xor16(
        a = zeroX,
        b[0] = nx,
        b[1] = nx,
        b[2] = nx,
        b[3] = nx,
        b[4] = nx,
        b[5] = nx,
        b[6] = nx,
        b[7] = nx,
        b[8] = nx,
        b[9] = nx,
        b[10] = nx,
        b[11] = nx,
        b[12] = nx,
        b[13] = nx,
        b[14] = nx,
        b[15] = nx,
        out = X
    );
    Xor16(
        a = zeroY,
        b[0] = ny,
        b[1] = ny,
        b[2] = ny,
        b[3] = ny,
        b[4] = ny,
        b[5] = ny,
        b[6] = ny,
        b[7] = ny,
        b[8] = ny,
        b[9] = ny,
        b[10] = ny,
        b[11] = ny,
        b[12] = ny,
        b[13] = ny,
        b[14] = ny,
        b[15] = ny,
        out = Y
    );

    // Logic And: X & Y
    And16(a = X, b= Y, out=andOut);
    
    // Add: X + Y
    Add16(a = X, b = Y, out = addOut);

    // f
    Mux16(a = andOut, b = addOut, sel = f, out = fOut);

    // main output
    Xor16(
        a = fOut,
        b[0] = no,
        b[1] = no,
        b[2] = no,
        b[3] = no,
        b[4] = no,
        b[5] = no,
        b[6] = no,
        b[7] = no,
        b[8] = no,
        b[9] = no,
        b[10] = no,
        b[11] = no,
        b[12] = no,
        b[13] = no,
        b[14] = no,
        b[15] = no,
        out = mainOut
    );

    // output[16], ng, zr
    And16(a = mainOut, b = true, out= out, out[15] = ng, out[0..7] = mainMsb, out[8..15]= mainLsb);

    // zr logic
    Or8Way(in= mainMsb , out= mainMsb8w );
    Or8Way(in= mainLsb , out= mainLsb8w );
    Or(a= mainMsb8w, b= mainLsb8w, out= orMainbits8w );
    Not(in=orMainbits8w , out= zr);
}
